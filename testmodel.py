import requests

dir= 'b1g0voaeihj99r85mvoi'

api= 'AQVNzuqpGnVZ97YTghU4nDOvG6ZRyW4AIG2mbs3f'

def sum(*questions, name, n):
    # print(questions)
    #Создаем список со словарями передаваемых сообщений
    messages = [
        {
            'role' : 'system',
            'text' : f'''Цель модели: Анализ текста, полученного от пользователя и составление вопросов для написания биографии о нем.
    В процессе ты, в качестве интервьюера, будешь задавать вопросы и использовать ответы для формирования единой линии жизни этого человека.
    В одном ответе ты должен выдать один вопрос. Строгое ограничение в 10 вопросов. При каждом следующем ответе необходимо отсчитывать количество оставшихся вопросов.
    СЧЕТЧИК: ОСТАЛОСЬ {n} вопросов.
    Внимательно отслеживайте количество оставшихся вопросов и стройте их логически так, чтобы можно было проследить всю биографическую линию человека.
    Анализ текста:
    От пользователя вам будет получена информация о человеке по определенному заданному ранее вопросу. Проанализируйте этот ответ. Прочитайте входной текст и поймите его контекст.
    В истории сообщений имеются все заданные ранее вопросы и ответы на них. Проанализируйте их и НЕ повторяйте заданных ранее вопросов.
    Выдача результата:
    Предоставьте пользователю окончательный текст вопроса, без помарок и дополнительных записей, просто текст вопроса.
    НЕ ВЗАИМОДЕЙСТВУЙТЕ с пользователем.
    Если в вопросе вы будете использовать имя человека, то его(ее) звали {name}.

    Примерный план, на который ты можешь опираться при постоении диалога:

    Начнем с основ. Пожалуйста, спроси у пользователя имя и фамилию умершего, а также его профессию или область деятельности.

    Исходя из полученной информации, сформулируй вопрос о ранних годах жизни человека, например: "Расскажите о детстве и молодости [имя умершего]. Какие важные моменты или события запомнились из этого периода?"

    Далее, спроси о профессиональной карьере умершего: "Какие профессиональные успехи или достижения [имя умершего] вы бы выделили?"

    После этого, перейдем к личной жизни: "Какие были основные аспекты личной жизни [имя умершего]? Можно ли выделить какие-то важные события или отношения?"

    Попроси о чертах характера умершего: "Какими чертами характера [имя умершего] вы бы описали его?"

    Следующий вопрос должен касаться значимых событий или периодов жизни: "Существуют ли какие-то особенные события или периоды жизни [имя умершего], которые вы считаете особенно значимыми или важными?"

    Подведи итоги: "Какие основные итоги или наследие [имя умершего] вы бы подчеркнули в его биографии?"

    Попроси о возможных упущенных фактах или аспектах жизни: "Есть ли какие-то факты или аспекты жизни [имя умершего], о которых вы хотели бы упомянуть, но которые мы еще не обсудили?"

    Завершение: "Что вы бы хотели, чтобы читатель чувствовал или думал, читая биографию [имя умершего]? Какие мысли или чувства вы хотели бы вызвать у него?"

    И, наконец, проконтролируй, чтобы биография была цельной и хорошо структурированной. Если есть какие-то дополнительные аспекты, которые могут придать биографии больше глубины или интереса, не стесняйся их добавить.

    важно, что ты в ответе пользователю должен выдавать только ОДИН вопрос
'''
        }, 
        {
        'role' : 'assistant',
        'text' : f'Какие важные моменты из детства или молодости могли бы оказать влияние на его будущую жизнь?'
        }, 
    ]
    #Добавляем сообщения в количестве равном количеству аргументов
    for question in questions:
        # print(question)
        messages.append(
            question
        )
    print(messages)
    #Создаем промт
    prompt = {
        "modelUri": f"gpt://{dir}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 1,
            "maxTokens": "5000"
        },

    
        "messages": messages
        
    }

    #Отправляем запрос
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {api}"
    }

    response = requests.post(url, headers=headers, json=prompt)
    result = response.json()
    if response.status_code == 200:
        return result["result"]["alternatives"][0]["message"]["text"]
    else:
        print(response.text)
        return f'Ошибка в запросе: код {response.status_code}'

text1 = {
    'role:' : 'user',
    'text' : '''В детстве Саша активно участвовал во всех школьных спортивных мероприятиях, что сформировало его стремление к достижению целей и упорству в достижении успеха. 
    Также, его родители всегда поддерживали его интересы к изучению искусства, что стимулировало его творческий потенциал и чувство самовыражения.'''
    }

text2 =  {
        'role' : 'assistant',
        'text' : 'Каким образом Sasha использовал свои знания и навыки для достижения профессиональных успехов?',
    }

text3 =  {
        'role' : 'user',
        'text' : 'Саша активно применял свои знания и навыки, полученные во время учебы в техническом вузе, для разработки инновационных технологий в области информационной безопасности. Его умение анализировать сложные технические проблемы и предлагать эффективные решения позволило ему занять высокую должность в крупной IT-компании и стать признанным экспертом в своей области'
    }


# print(sum(
#     text1,
#     text2,
#     text3,
#     name='Sasha',
#     n=8,
# ))



# PUT https://mc.dev.rand.agency/api/page/23647620
# Accept: application/json
# Content-Type: application/json;charset=UTF-8
# Authorization: Bearer 190|bwn9iJVmi42enrFNmQOigWDCqWUWBgDHCXsp2QXZ
import requests
from fake_useragent import UserAgent
def lalala():
# Instantiate the UserAgent class
    ua = UserAgent()
    
    # Get random user agents
    random_ua = ua.random
    headers = {
        'Content-Type': 'application/json;charset=UTF-8',
        'Accept': 'application/json',
        'Authorization': 'Bearer 1410|F9KvyyJcOUzqLa3TuWmiTnXiLUJEtUWB8DBJHhq4',
        'User-Agent': random_ua,
    }

    params = {
        "name": "Gay",
        "page_type_id": "1",
        "epitaph":"gayagyagya",
        "start":"10.11.2010",
        "start.day":"10",
        "start.month":"11",
        "start.year":"2010",
        "end":"10.11.2020",
        "end.day":"10",
        "end.month":"11",
        "end.year":"2020"
        }

    # with open('req.json',encoding='utf-8') as file:
    #     f = file.read()

    # params = f
    id = 23647620
    response = requests.put(
        f'https://mc.dev.rand.agency/api/page/{id}',
        headers=headers, params=params
    )
    print(response.text)

lalala()

